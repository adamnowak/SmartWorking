<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="true" hostspecific="true"#>

<#@ include file="EF.Utility.CS.ttinclude"#><#@  
 output extension=".cs"#><#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"DBbModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

// Write out support code to primary template output file
WriteHeader(fileManager);
BeginNamespace(namespaceName, code);
#>
public interface IPrimitive
{
    int Id { get; set; }
    Nullable<System.DateTime> Deleted { get; set; }
    Nullable<System.DateTime> Deactivated { get; set; }
    bool IsNew { get; }
    bool IsDeleted { get; }
    bool IsDeactive { get; }
}
    
public abstract class PrimitiveBase : IPrimitive
{
    public int Id { get; set; }
    public Nullable<System.DateTime> Deleted { get; set; }
    public Nullable<System.DateTime> Deactivated { get; set; }
    public bool IsNew
    {
        get { return Id <= 0; }            
    }
    public bool IsDeleted
    {
      get { return Deleted != null && Deleted.HasValue; }
    }
    public bool IsDeactive
    {
      get { return Deactivated != null && Deactivated.HasValue; }
    }
}
<#
EndNamespace(namespaceName);


// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
	fileManager.StartNewFile(entity.Name + "Primitive.cs");
	
    BeginNamespace(namespaceName, code);
	


#>
<#=Accessibility.ForType(entity)#> <#=code.SpaceAfter(code.AbstractOption(entity))#>partial class <#=code.Escape(entity)#>Primitive : PrimitiveBase
{
<#
	region.Begin("Primitive Properties");
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {

		bool isForeignKeyPrimitive = entity.NavigationProperties.Any(np=>np.GetDependentProperties().Contains(edmProperty));
        if (isForeignKeyPrimitive)
        {
#>
		<#=PropertyVirtualModifier(Accessibility.ForProperty(edmProperty))#> virtual <#=code.Escape(edmProperty.TypeUsage)#> <#=code.Escape(edmProperty)#>
		{
			<#=code.SpaceAfter(Accessibility.ForGetter(edmProperty))#>get;
			<#=code.SpaceAfter(Accessibility.ForSetter(edmProperty))#>set;
		}
<#
		}
		else
		{
			if (code.Escape(edmProperty) != "Id" && code.Escape(edmProperty) != "Deleted" && code.Escape(edmProperty) != "Deactivated")
			{
#>
		<#=PropertyVirtualModifier(Accessibility.ForProperty(edmProperty))#> <#=code.Escape(edmProperty.TypeUsage)#> <#=code.Escape(edmProperty)#>
		{
        <#=code.SpaceAfter(Accessibility.ForGetter(edmProperty))#>get;
        <#=code.SpaceAfter(Accessibility.ForSetter(edmProperty))#>set;
		}
<#
			}
		}  
    }
    region.End();
#>
}

<#
    EndNamespace(namespaceName);
}
fileManager.Process();

#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+  
    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility; //AN: we don't need proxy (we working on clear POCO)     + (accessibility != "private" ? " virtual" : "");
}

void WriteCustomObservableCollection()
{
#>
// An System.Collections.ObjectModel.ObservableCollection that raises
// individual item removal notifications on clear and prevents adding duplicates.
public class FixupCollection<T> : ObservableCollection<T>
{
    protected override void ClearItems()
    {
        new List<T>(this).ForEach(t => Remove(t));
    }

    protected override void InsertItem(int index, T item)
    {
        if (!this.Contains(item))
        {
            base.InsertItem(index, item);
        }
    }
}
<#+
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }

    }

    return true;
}
#>
