//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using SmartWorking.Office.PrimitiveEntities;

namespace SmartWorking.Office.Entities
{
    public partial class Contractor : ContractorPrimitive
    {
        #region Navigation Properties
    
        public ICollection<Material> Materials
        {
            get
            {
                if (_materials == null)
                {
                    var newCollection = new FixupCollection<Material>();
                    newCollection.CollectionChanged += FixupMaterials;
                    _materials = newCollection;
                }
                return _materials;
            }
            set
            {
                if (!ReferenceEquals(_materials, value))
                {
                    var previousValue = _materials as FixupCollection<Material>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMaterials;
                    }
                    _materials = value;
                    var newValue = value as FixupCollection<Material>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMaterials;
                    }
                }
            }
        }
        private ICollection<Material> _materials;
    
        public ICollection<Material> Materials1
        {
            get
            {
                if (_materials1 == null)
                {
                    var newCollection = new FixupCollection<Material>();
                    newCollection.CollectionChanged += FixupMaterials1;
                    _materials1 = newCollection;
                }
                return _materials1;
            }
            set
            {
                if (!ReferenceEquals(_materials1, value))
                {
                    var previousValue = _materials1 as FixupCollection<Material>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupMaterials1;
                    }
                    _materials1 = value;
                    var newValue = value as FixupCollection<Material>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupMaterials1;
                    }
                }
            }
        }
        private ICollection<Material> _materials1;

        #endregion
        #region Association Fixup
    
        private void FixupMaterials(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Material item in e.NewItems)
                {
                    item.Contractor = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Material item in e.OldItems)
                {
                    if (ReferenceEquals(item.Contractor, this))
                    {
                        item.Contractor = null;
                    }
                }
            }
        }
    
        private void FixupMaterials1(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (Material item in e.NewItems)
                {
                    item.Contractor1 = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (Material item in e.OldItems)
                {
                    if (ReferenceEquals(item.Contractor1, this))
                    {
                        item.Contractor1 = null;
                    }
                }
            }
        }

        #endregion
    }
}
