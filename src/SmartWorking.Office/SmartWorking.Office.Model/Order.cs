//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using SmartWorking.Office.PrimitiveEntities;

namespace SmartWorking.Office.Entities
{
    public partial class Order : OrderPrimitive
    {
        #region Primitive Properties
    		public override Nullable<int> Recipe_Id
    		{
            get { return _recipe_Id; }
            set
            {        
                try
                {
                    _settingFK = true;
                    if (_recipe_Id != value)
                    {
                        if (Recipe != null && Recipe.Id != value)
                        {
                            Recipe = null;
                        }
                        _recipe_Id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
    		}
    		private Nullable<int> _recipe_Id;    
    
    		public override Nullable<int> ClientBuilding_Id
    		{
            get { return _clientBuilding_Id; }
            set
            {        
                try
                {
                    _settingFK = true;
                    if (_clientBuilding_Id != value)
                    {
                        if (ClientBuilding != null && ClientBuilding.Id != value)
                        {
                            ClientBuilding = null;
                        }
                        _clientBuilding_Id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
    		}
    		private Nullable<int> _clientBuilding_Id;    
    

        #endregion
        #region Navigation Properties
    
        public ClientBuilding ClientBuilding
        {
            get { return _clientBuilding; }
            set
            {
                if (!ReferenceEquals(_clientBuilding, value))
                {
                    var previousValue = _clientBuilding;
                    _clientBuilding = value;
                    FixupClientBuilding(previousValue);
                }
            }
        }
        private ClientBuilding _clientBuilding;
    
        public ICollection<DeliveryNote> DeliveryNotes
        {
            get
            {
                if (_deliveryNotes == null)
                {
                    var newCollection = new FixupCollection<DeliveryNote>();
                    newCollection.CollectionChanged += FixupDeliveryNotes;
                    _deliveryNotes = newCollection;
                }
                return _deliveryNotes;
            }
            set
            {
                if (!ReferenceEquals(_deliveryNotes, value))
                {
                    var previousValue = _deliveryNotes as FixupCollection<DeliveryNote>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDeliveryNotes;
                    }
                    _deliveryNotes = value;
                    var newValue = value as FixupCollection<DeliveryNote>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDeliveryNotes;
                    }
                }
            }
        }
        private ICollection<DeliveryNote> _deliveryNotes;
    
        public Recipe Recipe
        {
            get { return _recipe; }
            set
            {
                if (!ReferenceEquals(_recipe, value))
                {
                    var previousValue = _recipe;
                    _recipe = value;
                    FixupRecipe(previousValue);
                }
            }
        }
        private Recipe _recipe;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupClientBuilding(ClientBuilding previousValue)
        {
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (ClientBuilding != null)
            {
                if (!ClientBuilding.Orders.Contains(this))
                {
                    ClientBuilding.Orders.Add(this);
                }
                if (ClientBuilding_Id != ClientBuilding.Id)
                {
                    ClientBuilding_Id = ClientBuilding.Id;
                }
            }
            else if (!_settingFK)
            {
                ClientBuilding_Id = null;
            }
        }
    
        private void FixupRecipe(Recipe previousValue)
        {
            if (previousValue != null && previousValue.Orders.Contains(this))
            {
                previousValue.Orders.Remove(this);
            }
    
            if (Recipe != null)
            {
                if (!Recipe.Orders.Contains(this))
                {
                    Recipe.Orders.Add(this);
                }
                if (Recipe_Id != Recipe.Id)
                {
                    Recipe_Id = Recipe.Id;
                }
            }
            else if (!_settingFK)
            {
                Recipe_Id = null;
            }
        }
    
        private void FixupDeliveryNotes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DeliveryNote item in e.NewItems)
                {
                    item.Order = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DeliveryNote item in e.OldItems)
                {
                    if (ReferenceEquals(item.Order, this))
                    {
                        item.Order = null;
                    }
                }
            }
        }

        #endregion
    }
}
