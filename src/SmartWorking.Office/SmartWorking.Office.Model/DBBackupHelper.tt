<#
//*********************************************************
//
//    Copyright (c) Microsoft. All rights reserved.
//    This code is licensed under the Microsoft Public License.
//    THIS CODE IS PROVIDED *AS IS* WITHOUT WARRANTY OF
//    ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING ANY
//    IMPLIED WARRANTIES OF FITNESS FOR A PARTICULAR
//    PURPOSE, MERCHANTABILITY, OR NON-INFRINGEMENT.
//
//*********************************************************
#>
<#@ template language="C#" debug="true" hostspecific="true"#>

<#@ include file="EF.Utility.CS.ttinclude"#><#@  
 output extension=".cs"#><#

CodeGenerationTools code = new CodeGenerationTools(this);
MetadataLoader loader = new MetadataLoader(this);
CodeRegion region = new CodeRegion(this, 1);
MetadataTools ef = new MetadataTools(this);

string inputFile = @"DBbModel.edmx";
EdmItemCollection ItemCollection = loader.CreateEdmItemCollection(inputFile);
string namespaceName = code.VsNamespaceSuggestion();

EntityFrameworkTemplateFileManager fileManager = EntityFrameworkTemplateFileManager.Create(this);

WriteHeader(fileManager);
BeginNamespace(namespaceName, code);
#>
public static class DBBackupHelper 
{
<#
PushIndent(CodeRegion.GetIndent(1));
#>


private static string GetDBValue(string dbString)
{
	return (dbString == null) ? "NULL" : string.Format("N'{0}'", dbString);
}

private static string GetDBValue(int dbInt)
{
	return dbInt.ToString();
}

private static string GetDBValue(int? dbIntNull)
{
	return (dbIntNull == null || !dbIntNull.HasValue) ? "NULL" : dbIntNull.Value.ToString();
}

private static string GetDBValue(double? dbDoubleNull)
{
	return (dbDoubleNull == null || !dbDoubleNull.HasValue) ? "NULL" : dbDoubleNull.Value.ToString(new CultureInfo("en-Us"));
}

private static string GetDBValue(DateTime? dbDateTimeNull)
{
	          return (dbDateTimeNull == null || !dbDateTimeNull.HasValue)
                   ? "NULL"
                   : string.Format("CAST(0x{0} AS DateTime)",
                                   ((int)((dbDateTimeNull.Value - new DateTime(1900, 1, 1)).TotalDays)).ToString("X8") +
                                   ((int)Math.Round((dbDateTimeNull.Value - dbDateTimeNull.Value.Date).TotalMilliseconds * 0.3,0)).ToString("X8"));
}

<#
PopIndent();
#>
<#
PushIndent(CodeRegion.GetIndent(1));
// Emit Entity Types
foreach (EntityType entity in ItemCollection.GetItems<EntityType>().OrderBy(e => e.Name))
{
#>
public static string GetDBInsertQuery(this <#=code.Escape(entity)#>Primitive primitive)
{
<#
PushIndent(CodeRegion.GetIndent(0));
#>
		if (primitive == null) return string.Empty;
		string values = " VALUES (";
		string result = "INSERT [dbo].[<#=GetEntitySetName(ItemCollection, entity)#>] (";
		<#string addText = "";
    foreach (EdmProperty edmProperty in entity.Properties.Where(p => p.TypeUsage.EdmType is PrimitiveType && p.DeclaringType == entity))
    {
#>
		result += "<#=addText#>[<#=code.Escape(edmProperty)#>]";
		values += string.Format("<#=addText#>{0}", GetDBValue(primitive.<#=code.Escape(edmProperty)#>));

<#addText = ", ";
    }
#>

		if (values.Length > 0)
			return result + ")" + values + ")";
		else 
			return string.Empty;
<#
PopIndent();
#>
}

<#
    
}
PopIndent();
#>
}
<#
EndNamespace(namespaceName);
fileManager.Process();

#>
<#+
void WriteHeader(EntityFrameworkTemplateFileManager fileManager, params string[] extraUsings)
{
    fileManager.StartHeader();
#>
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.Data.SqlTypes;
using System.Globalization;
<#=String.Join(String.Empty, extraUsings.Select(u => "using " + u + ";" + Environment.NewLine).ToArray())#>
<#+
    fileManager.EndBlock();
}

void BeginNamespace(string namespaceName, CodeGenerationTools code)
{
    CodeRegion region = new CodeRegion(this);
    if (!String.IsNullOrEmpty(namespaceName))
    {
#>
namespace <#=code.EscapeNamespace(namespaceName)#>
{
<#+
        PushIndent(CodeRegion.GetIndent(1));
    }
}


void EndNamespace(string namespaceName)
{
    if (!String.IsNullOrEmpty(namespaceName))
    {
        PopIndent();
#>
}
<#+  
    }
}

bool IsReadWriteAccessibleProperty(EdmMember member)
{
    string setter = Accessibility.ForWriteOnlyProperty(member);
    string getter = Accessibility.ForReadOnlyProperty(member);

    return getter != "private" && getter != "protected" && setter != "private" && setter != "protected";
}

string PropertyVirtualModifier(string accessibility)
{
    return accessibility; //AN: we don't need proxy (we working on clear POCO)     + (accessibility != "private" ? " virtual" : "");
}

void WriteCustomObservableCollection()
{
#>
// An System.Collections.ObjectModel.ObservableCollection that raises
// individual item removal notifications on clear and prevents adding duplicates.
public class FixupCollection<T> : ObservableCollection<T>
{
    protected override void ClearItems()
    {
        new List<T>(this).ForEach(t => Remove(t));
    }

    protected override void InsertItem(int index, T item)
    {
        if (!this.Contains(item))
        {
            base.InsertItem(index, item);
        }
    }
}
<#+
}

string GetEntitySetName(EdmItemCollection itemCollection, EntityType entity)
{
    //EntityContainer container = context.MetadataWorkspace.GetEntityContainer(context.DefaultContainerName, DataSpace.CSpace);
	EntityContainer container = itemCollection.GetItems<EntityContainer>().FirstOrDefault();

    return (from entitySet in container.BaseEntitySets.OfType<EntitySet>()
            where entitySet.ElementType.Name.Equals(entity.Name)
            select entitySet.Name).Single();
}

bool VerifyTypesAreCaseInsensitiveUnique(EdmItemCollection itemCollection)
{
    Dictionary<string, bool> alreadySeen = new Dictionary<string, bool>(StringComparer.OrdinalIgnoreCase);
    foreach(StructuralType type in itemCollection.GetItems<StructuralType>())
    {
        if (!(type is EntityType || type is ComplexType))
        {
            continue;
        }

        if (alreadySeen.ContainsKey(type.FullName))
        {
            Error(String.Format(CultureInfo.CurrentCulture, "This template does not support types that differ only by case, the types {0} are not supported", type.FullName));
            return false;
        }
        else
        {
            alreadySeen.Add(type.FullName, true);
        }

    }

    return true;
}
#>
