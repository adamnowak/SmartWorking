//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using SmartWorking.Office.PrimitiveEntities;

namespace SmartWorking.Office.Entities
{
    public partial class Driver : DriverPrimitive
    {
        #region Primitive Properties
    		public override Nullable<int> Car_Id
    		{
            get { return _car_Id; }
            set
            {        
                try
                {
                    _settingFK = true;
                    if (_car_Id != value)
                    {
                        if (Car != null && Car.Id != value)
                        {
                            Car = null;
                        }
                        _car_Id = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
    		}
    		private Nullable<int> _car_Id;    
    

        #endregion
        #region Navigation Properties
    
        public ICollection<DeliveryNote> DeliveryNotes
        {
            get
            {
                if (_deliveryNotes == null)
                {
                    var newCollection = new FixupCollection<DeliveryNote>();
                    newCollection.CollectionChanged += FixupDeliveryNotes;
                    _deliveryNotes = newCollection;
                }
                return _deliveryNotes;
            }
            set
            {
                if (!ReferenceEquals(_deliveryNotes, value))
                {
                    var previousValue = _deliveryNotes as FixupCollection<DeliveryNote>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupDeliveryNotes;
                    }
                    _deliveryNotes = value;
                    var newValue = value as FixupCollection<DeliveryNote>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupDeliveryNotes;
                    }
                }
            }
        }
        private ICollection<DeliveryNote> _deliveryNotes;
    
        public Car Car
        {
            get { return _car; }
            set
            {
                if (!ReferenceEquals(_car, value))
                {
                    var previousValue = _car;
                    _car = value;
                    FixupCar(previousValue);
                }
            }
        }
        private Car _car;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupCar(Car previousValue)
        {
            if (previousValue != null && previousValue.Drivers.Contains(this))
            {
                previousValue.Drivers.Remove(this);
            }
    
            if (Car != null)
            {
                if (!Car.Drivers.Contains(this))
                {
                    Car.Drivers.Add(this);
                }
                if (Car_Id != Car.Id)
                {
                    Car_Id = Car.Id;
                }
            }
            else if (!_settingFK)
            {
                Car_Id = null;
            }
        }
    
        private void FixupDeliveryNotes(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (DeliveryNote item in e.NewItems)
                {
                    item.Driver = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (DeliveryNote item in e.OldItems)
                {
                    if (ReferenceEquals(item.Driver, this))
                    {
                        item.Driver = null;
                    }
                }
            }
        }

        #endregion
    }
}
