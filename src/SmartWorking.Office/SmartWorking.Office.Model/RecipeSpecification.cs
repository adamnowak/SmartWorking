//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Runtime.Serialization;

namespace SmartWorking.Office.Entities
{
  [DataContract(IsReference = true)]
  [KnownType(typeof (Material))]
  [KnownType(typeof (Recipe))]
  public class RecipeSpecification : IObjectWithChangeTracker, INotifyPropertyChanged
  {
    #region Primitive Properties

    private double? _amount;
    private int _id;

    private int? _material_Id;

    private int? _recipe_Id;

    [DataMember]
    public int Id
    {
      get { return _id; }
      set
      {
        if (_id != value)
        {
          if (ChangeTracker.ChangeTrackingEnabled && ChangeTracker.State != ObjectState.Added)
          {
            throw new InvalidOperationException(
              "The property 'Id' is part of the object's key and cannot be changed. Changes to key properties can only be made when the object is not being tracked or is in the Added state.");
          }
          _id = value;
          OnPropertyChanged("Id");
        }
      }
    }

    [DataMember]
    public int? Material_Id
    {
      get { return _material_Id; }
      set
      {
        if (_material_Id != value)
        {
          ChangeTracker.RecordOriginalValue("Material_Id", _material_Id);
          if (!IsDeserializing)
          {
            if (Material != null && Material.Id != value)
            {
              Material = null;
            }
          }
          _material_Id = value;
          OnPropertyChanged("Material_Id");
        }
      }
    }

    [DataMember]
    public int? Recipe_Id
    {
      get { return _recipe_Id; }
      set
      {
        if (_recipe_Id != value)
        {
          ChangeTracker.RecordOriginalValue("Recipe_Id", _recipe_Id);
          if (!IsDeserializing)
          {
            if (Recipe != null && Recipe.Id != value)
            {
              Recipe = null;
            }
          }
          _recipe_Id = value;
          OnPropertyChanged("Recipe_Id");
        }
      }
    }

    [DataMember]
    public double? Amount
    {
      get { return _amount; }
      set
      {
        if (_amount != value)
        {
          _amount = value;
          OnPropertyChanged("Amount");
        }
      }
    }

    #endregion

    #region Navigation Properties

    private Material _material;

    private Recipe _recipe;

    [DataMember]
    public Material Material
    {
      get { return _material; }
      set
      {
        if (!ReferenceEquals(_material, value))
        {
          Material previousValue = _material;
          _material = value;
          FixupMaterial(previousValue);
          OnNavigationPropertyChanged("Material");
        }
      }
    }

    [DataMember]
    public Recipe Recipe
    {
      get { return _recipe; }
      set
      {
        if (!ReferenceEquals(_recipe, value))
        {
          Recipe previousValue = _recipe;
          _recipe = value;
          FixupRecipe(previousValue);
          OnNavigationPropertyChanged("Recipe");
        }
      }
    }

    #endregion

    #region ChangeTracking

    private ObjectChangeTracker _changeTracker;
    protected bool IsDeserializing { get; private set; }

    #region INotifyPropertyChanged Members

    event PropertyChangedEventHandler INotifyPropertyChanged.PropertyChanged
    {
      add { _propertyChanged += value; }
      remove { _propertyChanged -= value; }
    }

    #endregion

    #region IObjectWithChangeTracker Members

    [DataMember]
    public ObjectChangeTracker ChangeTracker
    {
      get
      {
        if (_changeTracker == null)
        {
          _changeTracker = new ObjectChangeTracker();
          _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
        }
        return _changeTracker;
      }
      set
      {
        if (_changeTracker != null)
        {
          _changeTracker.ObjectStateChanging -= HandleObjectStateChanging;
        }
        _changeTracker = value;
        if (_changeTracker != null)
        {
          _changeTracker.ObjectStateChanging += HandleObjectStateChanging;
        }
      }
    }

    #endregion

    protected virtual void OnPropertyChanged(String propertyName)
    {
      if (ChangeTracker.State != ObjectState.Added && ChangeTracker.State != ObjectState.Deleted)
      {
        ChangeTracker.State = ObjectState.Modified;
      }
      if (_propertyChanged != null)
      {
        _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
      }
    }

    protected virtual void OnNavigationPropertyChanged(String propertyName)
    {
      if (_propertyChanged != null)
      {
        _propertyChanged(this, new PropertyChangedEventArgs(propertyName));
      }
    }

    private event PropertyChangedEventHandler _propertyChanged;

    private void HandleObjectStateChanging(object sender, ObjectStateChangingEventArgs e)
    {
      if (e.NewState == ObjectState.Deleted)
      {
        ClearNavigationProperties();
      }
    }

    [OnDeserializing]
    public void OnDeserializingMethod(StreamingContext context)
    {
      IsDeserializing = true;
    }

    [OnDeserialized]
    public void OnDeserializedMethod(StreamingContext context)
    {
      IsDeserializing = false;
      ChangeTracker.ChangeTrackingEnabled = true;
    }

    protected virtual void ClearNavigationProperties()
    {
      Material = null;
      Recipe = null;
    }

    #endregion

    #region Association Fixup

    private void FixupMaterial(Material previousValue, bool skipKeys = false)
    {
      if (IsDeserializing)
      {
        return;
      }

      if (previousValue != null && previousValue.RecipeSpecifications.Contains(this))
      {
        previousValue.RecipeSpecifications.Remove(this);
      }

      if (Material != null)
      {
        if (!Material.RecipeSpecifications.Contains(this))
        {
          Material.RecipeSpecifications.Add(this);
        }

        Material_Id = Material.Id;
      }
      else if (!skipKeys)
      {
        Material_Id = null;
      }

      if (ChangeTracker.ChangeTrackingEnabled)
      {
        if (ChangeTracker.OriginalValues.ContainsKey("Material")
            && (ChangeTracker.OriginalValues["Material"] == Material))
        {
          ChangeTracker.OriginalValues.Remove("Material");
        }
        else
        {
          ChangeTracker.RecordOriginalValue("Material", previousValue);
        }
        if (Material != null && !Material.ChangeTracker.ChangeTrackingEnabled)
        {
          Material.StartTracking();
        }
      }
    }

    private void FixupRecipe(Recipe previousValue, bool skipKeys = false)
    {
      if (IsDeserializing)
      {
        return;
      }

      if (previousValue != null && previousValue.RecipeSpecifications.Contains(this))
      {
        previousValue.RecipeSpecifications.Remove(this);
      }

      if (Recipe != null)
      {
        if (!Recipe.RecipeSpecifications.Contains(this))
        {
          Recipe.RecipeSpecifications.Add(this);
        }

        Recipe_Id = Recipe.Id;
      }
      else if (!skipKeys)
      {
        Recipe_Id = null;
      }

      if (ChangeTracker.ChangeTrackingEnabled)
      {
        if (ChangeTracker.OriginalValues.ContainsKey("Recipe")
            && (ChangeTracker.OriginalValues["Recipe"] == Recipe))
        {
          ChangeTracker.OriginalValues.Remove("Recipe");
        }
        else
        {
          ChangeTracker.RecordOriginalValue("Recipe", previousValue);
        }
        if (Recipe != null && !Recipe.ChangeTracker.ChangeTrackingEnabled)
        {
          Recipe.StartTracking();
        }
      }
    }

    #endregion
  }
}